Fuse Collaborative Document Editor DesignBasic Text and Edit Command ManipulationAuthor:     Andy Wright <waw@well.com>Revision:   1.0Date:		26 Mar 2005=========================================Base edit commands------------------All document altering edit commands can be broken into an ordered list of the following three commands --1) POSITION cursor before a specified document character position measured from the beginning of the document.2) INSERT given character string at cursor position, and move cursor to end of inserted string.3) DELETE given number of characters before (+) or after (-) cursor position, and move cursor to the beginning of the deleted document region.Some properties of these commands----------------------------------- To avoid character position ambiguity due to text encoding, all text will be internally stored as one string element per character position.  This prohibits constructs such as '/r/n' for line separators, use of multi-character sequences for over-strike characters, and the control characters '/b' and '/t'.  '/f' should be interpreted as both a line and page separator.-- The atomic (corresponding to single keystrokes) version of INSERT and DELETE commands insert and delete one single character. -- Both INSERT and DELETE commands are transition.  For example, INSERT ('abc') = INSERT('a') + INSERT ('bc').  This property can be used to shorten queued command sequences.-- for every POSITION + INSERT or POSITION + DELETE command sequence, there is an equivalent inverse command sequence.  This linearity insures any sequence of commands can be undone and redone.-- POSITION + INSERT and POSITION + DELETE command sequences are communitive only if the effected text regions do not overlap.  If this criteria does not hold or isn't provable, then either their execution order must be insured or the commands must be undone and redone in a controlled order.-- If more than one user is editing the same document, command delays due to transmission or edit arbitration are indistinguishable from an unknowable decision by a remote users to wait momentarily before typing.  Reasonable delay in edit action is acceptable to human editors.  Indeterminate results of an edit action are never acceptable.Intelligent Caching-------------------In the Basic Editing Dataflow Diagram there are three intelligent caches that will be described in detail below.  These serve as good exercises in understanding the properties of the base edit commands.The Network Adaptor / Packet FIFO --In order to keep all editing stations in synchronization, local user keystrokes that alter the edit document must be transmitted from the user to the text segment store and also broadcast to all other edit stations via the Network.  Likewise all other edit stations must transmit each document alteration through the network to our text segment store and our user.Ideally each keystroke would be immediately broadcast via the network.  But suppose the Network layer determines that this rate of packets transmission cannot be reliably sustained by the network.  The network adaptor / packet FIFO can effectively throttle packet transmission to a rate specified by the network layer by combining outgoing insert character command packets into insert string packets, etc.  In addition, retransmissions of lost commands can include all pending characters, effectively minimizing the cost the transmission errors.The text segment store is used as an intermediate buffer between the user and the network by the edit contention logic.  Each transmitted edit command packet is restricted to a single text segment.  This allows the network adaptor / packet FIFO to enforce several other network transmission constraints.  In practice, network packets must be restricted in length to insure reliable and timely transmission.  This can be efficiently achieved by placing an equivalent restriction on the maximum text segment length.Network packet latency is very much larger than the transmission duration of a single packet.  This can be countermanded by overlapping transmission of edit command packets for multiple text segments.Timely ordered packet reception cannot be guaranteed.  This can be  countermanded by implementing a blocking incoming edit command packet buffer for each text segment.  Each text segment buffer blocks until it can emit an ordered stream of edit commands for its segment.  Interleaved commands to other text segments need not be ordered, since their text is guaranteed not to overlap.  This enables efficient parallel transmission of multiple text segments edits commands. Undo Command Logic / FILO --Why do we implement this functionality, when it is almost certainly present in whatever front end editor framework we choose?  Because the front end editor guarantees the sequential stacking of user commands, but can not guarantee the non-overlap of these commands with edits posted by remote edit stations.  Therefore we have to re-implement this function with stronger restrictions to guarantee do / undo linearity.  The simplest such restriction would be to truncate the undo FILO at the most recent instance of overlay with any other edit station command.Edit Adaptor / Command FIFO --The user depends on timely feedback from his or her edit command entry.  We want to decouple this feedback loop from the less than timely network transmission and contention arbitration delays.  This FIFO along with the text segment store achieves this objective.To minimize potentially detrimental contentions between the contents of the front end editor's display and the text segment store, edit commands should fall through this buffer as fast as they can be accepted by the front end editor and edit contention logic.  This can be achieved with minimal practical unintended contention generation by aggressively merging edit commands in each direction's FIFO.There are two other problems, which must be addressed.  First, cursor position commands going in different directions reference different documents.  The cursor positioning command(s) referencing a position beyond that of the other direction's still buffered edit commands must be adjusted to reflect these still pending text insertions or deletions.Second, if there are commands buffered in both directions, whose edit regions overlap, the results will be based upon an incorrect edit posting order.  Our only answer to such conflicts is to ask the front end editor to back out the offending edits, post the remote edits, and then reapply the offending user's edit.  This case will only occur when two users are trying to edit oven each other's cursor position, in which case, some document display screen flashing should be acceptable.-- eof --